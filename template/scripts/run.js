const path = require('path')
const fs = require('fs')
const { spawn } = require('child_process')
const stripJsonComments = require('strip-json-comments').default

console.log('üü° Iniciando run.js...\n')

// Verificamos el entorno
const environment = process.env.NODE_ENV
console.log(`üåç NODE_ENV: ${environment}`)
if (!environment) {
  console.error('‚ùå Debes definir NODE_ENV (ej: NODE_ENV=production node run.js)')
  process.exit(1)
}

// Ruta a los archivos de configuraci√≥n JSON
const configPath = path.resolve(__dirname, '../', `config.${environment}.jsonc`)
const localConfigPath = path.resolve(__dirname, '../', `config.${environment}.local.jsonc`)

console.log(`üîé Buscando configuraci√≥n en: ${configPath}`)
if (!fs.existsSync(configPath)) {
  console.error(`‚ùå Archivo de configuraci√≥n no encontrado: ${configPath}`)
  process.exit(1)
}

// Cargamos la configuraci√≥n base y la local si existe
let config = {}
try {
  config = JSON.parse(stripJsonComments(fs.readFileSync(configPath, 'utf-8')))
  console.log('‚úÖ Configuraci√≥n base cargada correctamente')
} catch (err) {
  console.error(`‚ùå Error al parsear ${configPath}:`, err.message)
  process.exit(1)
}

if (fs.existsSync(localConfigPath)) {
  try {
    const localConfig = JSON.parse(fs.readFileSync(localConfigPath, 'utf-8'))
    config = { ...config, ...localConfig }
    console.log(`üîÅ Configuraci√≥n local aplicada desde ${localConfigPath}`)
  } catch (err) {
    console.error(`‚ùå Error al parsear ${localConfigPath}:`, err.message)
    process.exit(1)
  }
} else {
  console.log(`‚ÑπÔ∏è  No se encontr√≥ configuraci√≥n local (${localConfigPath})`)
}

// Verificamos si el flag --local est√° presente
const isLocal = process.argv.includes('--local')
console.log(`üìç Modo local: ${isLocal}`)

// Determinamos la ruta al archivo app.js
let appPath
if (isLocal) {
  appPath = path.resolve(__dirname, '../', 'build', environment, 'debug', 'app.js')
  console.log(`üì¶ Ejecutando build LOCAL: ${appPath}`)
} else {
  const deployDir = config.DEPLOY_DIR
  if (!deployDir) {
    console.error(`‚ùå La variable DEPLOY_DIR no est√° definida en config.${environment}.jsonc`)
    process.exit(1)
  }
  appPath = path.resolve(deployDir, 'SEI-SF-INTEGRATION', environment, 'dist', 'app.js')
  console.log(`üöÄ Ejecutando build DEPLOY: ${appPath}`)
}

// Verificamos existencia del archivo
console.log(`üìÅ Verificando existencia de: ${appPath}`)
if (!fs.existsSync(appPath)) {
  console.error(`‚ùå El archivo app.js no existe en: ${appPath}`)
  console.warn(`üß† Tip: Verifica si el build fue generado correctamente o si el path es correcto.`)
  process.exit(1)
}

// Pasamos las variables del config.jsonc como variables de entorno
const envVars = { ...process.env }
for (const [key, value] of Object.entries(config)) {
  envVars[key] = String(value)
}
console.log('üå± Variables de entorno preparadas.\n')

// Ejecutamos app.js usando child_process
console.log(`üöÄ Ejecutando aplicaci√≥n: node ${appPath}\n`)

const subprocess = spawn('node', [appPath], {
  stdio: 'inherit',
  env: envVars,
})

subprocess.on('exit', (code) => {
  if (code !== 0) {
    console.error(`‚ùå La aplicaci√≥n termin√≥ con c√≥digo de salida ${code}`)
  } else {
    console.log('‚úÖ La aplicaci√≥n se ejecut√≥ correctamente.')
  }
})
